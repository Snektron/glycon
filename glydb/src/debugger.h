#ifndef _GLYDB_DEBUGGER_H
#define _GLYDB_DEBUGGER_H

#include "common/glycon.h"

#include "connection.h"

#include <stddef.h>
#include <stdbool.h>
#include <stdint.h>

// This structure represents the current state of the debugger.
struct debugger {
    // Set to true if the debugger REPL loop should terminate.
    bool quit;
    // The current connection to the target device.
    struct connection conn;
    // Address-space sized buffer that can be used to store data for reading/writing.
    uint8_t* scratch;
};

// Initialize a debugger. If `initial_port` is not `NULL`, attempt to open this
// port directly.
void debugger_init(struct debugger* dbg, const char* initial_port);

// Deinitialize resources owned by the debugger, and close any connection.
void debugger_deinit(struct debugger* dbg);

// Evaluate a single line.
void debugger_do_line(struct debugger* dbg, size_t len, const char line[len]);

// REPL loop that executes until the `quit` command is invoked.
void debugger_repl(struct debugger* dbg);

// Check that the debugger has a connection currently open. If not, this function returns `true` and
// prints an explanatory message to the user.
bool debugger_require_connection(struct debugger* dbg);

// Print an error message to the user.
void debugger_print_error(struct debugger* dbg, const char* fmt, ...) __attribute__((format(printf, 2, 3)));

// A structure describing the target location of some amount of bytes that needs
// to be written. Bytes themselves are stored externally.
struct debugger_write_op {
    gly_addr_t address;
    size_t len;
};

// Structure that describes options for `debugger_load_file`.
struct debugger_load_file_options {
    // The path that the file should be found at.
    const char* path;
    // Override the extension type. If `NULL`, the file type is guessed from the path extension.
    // May be either `"ihx"` or `"bin"`.
    const char* ext_override;
    // Relocation address to add to the binary's intended location.
    gly_addr_t relocation;
};

// Load a binary file of data that is intended to be written somewhere.
// `opts` is a structure describing some loading options.
// `ops` is a pointer to a variable that will be used to store the array of write operations
// generated by this file.
// `buffer` will be filled with the data to write. This buffer should be able to hold the entire address space, 64KiB.
bool debugger_load_file(struct debugger* dbg, const struct debugger_load_file_options* opts, struct debugger_write_op** ops, uint8_t* buffer);

#endif
