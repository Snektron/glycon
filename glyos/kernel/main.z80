PORT_PIO_A_DATA    .equ 0x00
PORT_PIO_B_DATA    .equ 0x01
PORT_PIO_A_CONTROL .equ 0x02
PORT_PIO_B_CONTROL .equ 0x03

PIO_CMD_SET_MODE .equ 0xF0

; Constants are reversed for now because the page pio is reversed...
PIO_MODE_OUTPUT .equ 0x00
PIO_MODE_INPUT  .equ 0x02
PIO_MODE_BIDIR  .equ 0x01
PIO_MODE_CTRL   .equ 0x03

rst00:
    jp boot

.fill 0x08-$
rst08:
    ret

.fill 0x10-$
rst10:
    ret

.fill 0x18-$
rst18:
    ret

.fill 0x20-$
rst20:
    ret

.fill 0x28-$
rst28:
    ret

.fill 0x30-$
rst30:
    ret

.fill 0x38-$
rst38:
    ret

boot:
    ; Disable interrupts
    di
    ; Set the page pio to manual mode in both ports
    ld a, PIO_CMD_SET_MODE | PIO_MODE_CTRL
    out (PORT_PIO_A_CONTROL), a
    out (PORT_PIO_B_CONTROL), a
    ; Define all pins of both ports as output for now.
    xor a, a
    out (PORT_PIO_A_CONTROL), a
    out (PORT_PIO_B_CONTROL), a

    ld a, PIO_CMD_SET_MODE | PIO_MODE_CTRL
    out (PORT_PIO_B_CONTROL), a
    xor a, a
    out (PORT_PIO_B_CONTROL), a

    ; Manually put ram page 01 in slot 2 (0x8000 - 0xBFFF). We don't have a
    ; stack pointer yet, so we cannot call setpage2 yet.
    ; note, bit reversed value.
    ld a, 0x10 ; pages 0000 1000
    out (PORT_PIO_B_DATA), a
    ; Set stack pointer in slot 2. For now this is probably
    ; enough...
    ld sp, 0x8100

    ; Set the remaining pages using the setpage functions.

    ld a, 0x01 ; ROM page 1
    call setpage1
    ld a, 0x81 ; RAM page 1
    call setpage3
    ; Blinky mode
    ld a, 0xF
    call setportc

    ; Load start adress of memory into HL
    ld ix, 0x8000
    ld bc, 0x2

; fill ram with corresponding adress values (16 bit, inc by 2)
.loop0:
    ld hl, 0x0000
    ld ix, 0x9000
    in a, (PORT_PIO_B_DATA)
    xor a, 0x0F
    out (PORT_PIO_B_DATA), a
.loop1:
    ld (ix + 0), h
    ld (ix + 1), l

    inc hl
    add ix, bc

    jp c, .loop0

    jp .loop1

; Set page in slot 1 (address 0x4000-0x7FFF)
; a: page (0-16)
; destroys l
setpage1:
    ; Clear any upper bits if the user supplied them
    and a, 0x0F
    ; Reverse bits in a, since the PIO data is reversed
    call bitreverse
    ; Slot 1 is high bits of PORT_PIO_A_DATA, so this should be correct already
    ld l, a
    in a, (PORT_PIO_A_DATA)
    and a, 0x0F
    or a, l
    out (PORT_PIO_A_DATA), a
    ret

; Set page in slot 2 (address 0x8000-0xBFFF)
; a: page (0-16)
; destroys l
setpage2:
    ; Reverse bits in a, since the PIO data is reversed
    call bitreverse
    ; Slot 2 is the low bits of port B
    ; Shift also clears any upper bits of the original a
    srl a
    srl a
    srl a
    srl a
    ld l, a
    in a, (PORT_PIO_B_DATA)
    and a, 0xF0
    or a, l
    out (PORT_PIO_B_DATA), a
    ret

; Set page in slot 3 (address 0xC000-0xFFFF)
; a: page (0-16)
; destroys l
setpage3:
    ; Reverse bits in a, since the PIO data is reversed
    call bitreverse
    ; Slot 2 is the low bits of port B
    ; Shift also clears any upper bits of the original a
    srl a
    srl a
    srl a
    srl a
    ld l, a
    in a, (PORT_PIO_A_DATA)
    and a, 0xF0
    or a, l
    out (PORT_PIO_A_DATA), a
    ret

; Set the GPIO state of GPIO port C.
; a: gpio state (4 bits)
setportc:
    ; Reverse bits in a, since the PIO data is reversed
    call bitreverse
    ; GPIO C is the high bits of port B
    ; Shift also clears any upper bits of the original a
    srl a
    srl a
    srl a
    srl a
    ld l, a
    in a, (PORT_PIO_B_DATA)
    and a, 0xF0
    or a, l
    out (PORT_PIO_B_DATA), a
    ret

; Reverse bits in A
; Destroys L
; http://www.retroprogramming.com/2014/01/fast-z80-bit-reversal.html
bitreverse:
    ld l,a    ; a = 76543210
    rlca
    rlca      ; a = 54321076
    xor l
    and 0xAA
    xor l     ; a = 56341270
    ld l,a
    rlca
    rlca
    rlca      ; a = 41270563
    rrc l     ; l = 05634127
    xor l
    and 0x66
    xor l     ; a = 01234567
    ret